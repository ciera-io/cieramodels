// BP 7.1.6 content: InstanceStateMachine syschar: 3 persistence-version: 7.1.6

within HeartRateMonitor::HeartRateMonitor::HeartRateMonitor::HeartRateMonitor::Monitor is

  @state_num(1);
  @dialect("oal");
  state idle;

  @state_num(2);
  @dialect("oal");
  state monitoring;

  @state_num(3);
  @dialect("oal");
  state Registering;

  @state_num(4);
  @dialect("oal");
  state Unregistering;

  @event_num(3);
  event timeout;

  @event_num(5);
  event registerComplete;

  @event_num(7);
  event unregisterComplete;

  @event_num(8);
  event registerListener;

  @event_num(9);
  event unregisterListener;

  state machine is

    |                    | timeout            | registerComplete   | unregisterComplete | registerListener   | unregisterListener |
    | ------------------ | ------------------ | ------------------ | ------------------ | ------------------ | ------------------ |
    | idle               | cannot_happen      | cannot_happen      | cannot_happen      | Registering        | cannot_happen      |
    | monitoring         | monitoring         | cannot_happen      | cannot_happen      | cannot_happen      | Unregistering      |
    | Registering        | cannot_happen      | monitoring         | cannot_happen      | cannot_happen      | cannot_happen      |
    | Unregistering      | cannot_happen      | cannot_happen      | idle               | cannot_happen      | cannot_happen      |

  end state machine;

  state monitoring is
    @noparse
    send HR::heartRateChanged(heartRate: self.recentHeartRate);
    self.recentHeartRate = self.recentHeartRate + 1;
    @endnoparse
  end state;

  state Registering is
    @noparse
    self.recentHeartRate = 50;
    
    LOG::LogInfo(message: "listener registered");
    
    // start timer
    HeartRateConstants::initialize();
    select any hrc from instances of HeartRateConstants;
    create event instance timeout of HRM3:timeout() to self; 
    self.timer = TIM::timer_start_recurring( event_inst: timeout, microseconds: (hrc.HeartRateSamplingPeriod * 1000000) ); 
    
    generate HRM5:registerComplete() to self;
    @endnoparse
  end state;

  state Unregistering is
    @noparse
    res = TIM::timer_cancel(timer_inst_ref: self.timer);
    if ( res )
      LOG::LogSuccess( message: "Heart Rate Monitor: timer_cancel() succeeded." );
    else
      LOG::LogFailure( message: "Heart Rate Monitor: timer_cancel() failed." );
    end if;
    
    generate HRM7:unregisterComplete() to self;
    @endnoparse
  end state;

end;
