// BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

within Tracking::Tracking::Tracking is

  package functions is
    @dialect("oal");
    function heartRateChanged(heartRate: in integer) is
      @noparse
      // Find the singleton instance of the workout session
      // and forward this signal, as an event, to it.
      // If there is no active workout session, then this 
      // sample is simply ignored and not recorded.
      
      select any session from instances of WorkoutSession;
      if (not empty session)
        session.addHeartRateSample(heartRate: param.heartRate);
      end if;
      @endnoparse
    end function;

    @dialect("oal");
    function lapResetPressed() is
      @noparse
      // Find the singleton instance of the workout timer 
      // and forward this signal, as an event, to it.
      
      select any workoutTimer from instances of WorkoutTimer;
      if (not empty workoutTimer)
        generate WorkoutTimer2:lapResetPressed() to workoutTimer;
      else
        LOG::LogFailure( message:"Tracking:UI:lapResetPressed - No WorkoutTimer, so nothing to do." );
      end if;
      @endnoparse
    end function;

    @dialect("oal");
    function lightPressed() is
      @noparse
      ARCH::shutdown();
      @endnoparse
    end function;

    @dialect("oal");
    function locationChanged(latitude: in real, longitude: in real) is
      @noparse
      // Store a new track point.
      select any session from instances of WorkoutSession;
      if (not empty session)
        select one trackLog related by session->TrackLog[R4.'captures_path_in'];
        trackLog.addTrackPoint( latitude:param.latitude, longitude:param.longitude );
      end if;
      @endnoparse
    end function;

    @dialect("oal");
    function modePressed() is
      @noparse
      // Notify the display to change modes.
      
      // Find the display related to the singleton instance of 
      //   workout session (if it exists), and notify it.
      select any session from instances of WorkoutSession;
      if ( not empty session )
        select one display related by session->Display[R7.'current_status_indicated_on'];
        generate Display1:modeChange to display;
      end if;
      @endnoparse
    end function;

    @dialect("oal");
    function newGoalSpec(spanType: in GoalSpan, criteriaType: in GoalCriteria, span: in real, maximum: in real, minimum: in real, sequenceNumber: in integer) is
      @noparse
      // Create a new goal specification and relate it to the
      //   singleton instance of workout session if it exists.
      select any session from instances of WorkoutSession;
      if ( not empty session )
        create object instance goalSpec of GoalSpec;
        goalSpec.sequenceNumber = param.sequenceNumber;
        goalSpec.minimum = param.minimum;
        goalSpec.maximum = param.maximum;
        goalSpec.span = param.span;
        goalSpec.criteriaType = param.criteriaType;
        goalSpec.spanType = param.spanType;
        relate goalSpec to session across R10.'included_in';
      end if;
      @endnoparse
    end function;

    @dialect("oal");
    function setTargetPressed() is
      @noparse
      // If a goal is currently executing, advance to the next one,
      //   otherwise start the first specified goal, if it exists.
      Goal::nextGoal();
      @endnoparse
    end function;

    @dialect("oal");
    function startStopPressed() is
      @noparse
      // If necessary, create a workout session and everything required to 
      // support it.  Then, forward this signal to the workout timer.
      
      WorkoutSession::initialize();
      
      // Forward this signal, as an event, to the singleton instance of WorkoutTimer.
      select any workoutTimer from instances of WorkoutTimer;
      generate WorkoutTimer1:startStopPressed() to workoutTimer;
      @endnoparse
    end function;

  end package;

end;
