// BP 7.1.6 content: InstanceStateMachine syschar: 3 persistence-version: 7.1.6

within Tracking::Tracking::Tracking::Tracking::Display is

  @state_num(1);
  @dialect("oal");
  state displayDistance;

  @state_num(2);
  @dialect("oal");
  state displaySpeed;

  @state_num(3);
  @dialect("oal");
  state displayPace;

  @state_num(4);
  @dialect("oal");
  state displayHeartRate;

  @state_num(5);
  @dialect("oal");
  state displayLapCount;

  @event_num(1);
  event modeChange;

  @event_num(2);
  event refresh;

  state model is

    |                  | modeChange       | refresh          |
    | ---------------- | ---------------- | ---------------- |
    | displayDistance  | displaySpeed     | displayDistance  |
    | displaySpeed     | displayPace      | displaySpeed     |
    | displayPace      | displayHeartRate | displayPace      |
    | displayHeartRate | displayLapCount  | displayHeartRate |
    | displayLapCount  | displayDistance  | displayLapCount  |

  end state model;

  state displayDistance is
    @noparse
    select one session related by self->WorkoutSession[R7.'indicates_current_status_of'];
    distance = session.accumulatedDistance;
    if ( distance > 1000.0 )
      send UI::setData(value: distance / 1000.0, unit: Unit::km);
    else 
      send UI::setData(value: distance, unit: Unit::meters);
    end if;
    send UI::setIndicator( indicator: Display::goalDispositionIndicator() );
    @endnoparse
  end state;

  state displaySpeed is
    @noparse
    select one session related by self->WorkoutSession[R7.'indicates_current_status_of'];
    speed = session.getCurrentSpeed();
    send UI::setData(value: speed, unit: Unit::kmPerHour);
    send UI::setIndicator( indicator: Display::goalDispositionIndicator() );
    @endnoparse
  end state;

  state displayPace is
    @noparse
    select one session related by self->WorkoutSession[R7.'indicates_current_status_of'];
    pace = session.getCurrentPace();
    send UI::setData(value: pace, unit: Unit::minPerKm);
    send UI::setIndicator( indicator: Display::goalDispositionIndicator() );
    @endnoparse
  end state;

  state displayHeartRate is
    @noparse
    select one session related by self->WorkoutSession[R7.'indicates_current_status_of'];
    heartRate = session.getCurrentHeartRate();
    send UI::setData(value: heartRate, unit: Unit::bpm);
    send UI::setIndicator( indicator: Display::goalDispositionIndicator() );
    @endnoparse
  end state;

  state displayLapCount is
    @noparse
    select many lapMarkers related by self->WorkoutSession[R7.'indicates_current_status_of']->TrackLog[R4.'captures_path_in']->LapMarker[R5.'has_laps_defined_by'];
    send UI::setData(value: cardinality lapMarkers, unit: Unit::laps);
    send UI::setIndicator( indicator: Display::goalDispositionIndicator() );
    @endnoparse
  end state;

end;
