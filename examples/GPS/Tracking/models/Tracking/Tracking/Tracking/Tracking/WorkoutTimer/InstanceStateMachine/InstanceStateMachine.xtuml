// BP 7.1.6 content: InstanceStateMachine syschar: 3 persistence-version: 7.1.6

within Tracking::Tracking::Tracking::Tracking::WorkoutTimer is

  @state_num(1);
  @dialect("oal");
  state stopped;

  @state_num(2);
  @dialect("oal");
  state running;

  @state_num(3);
  @dialect("oal");
  state paused;

  @state_num(6);
  @dialect("oal");
  state processingStart;

  @state_num(8);
  @dialect("oal");
  state resetLap;

  @event_num(1);
  event startStopPressed;

  @event_num(2);
  event lapResetPressed;

  @event_num(3);
  event tick;

  @event_num(4);
  event pause;

  @event_num(5);
  event resume;

  @event_num(6);
  event startTimer;

  @event_num(8);
  event lapResetComplete;

  state machine is

    |                  | startStopPressed | lapResetPressed  | tick             | pause            | resume           | startTimer       | lapResetComplete |
    | ---------------- | ---------------- | ---------------- | ---------------- | ---------------- | ---------------- | ---------------- | ---------------- |
    | stopped          | processingStart  | ignore           | ignore           | cannot_happen    | cannot_happen    | cannot_happen    | cannot_happen    |
    | running          | paused           | resetLap         | running          | cannot_happen    | cannot_happen    | cannot_happen    | cannot_happen    |
    | paused           | processingStart  | stopped          | ignore           | cannot_happen    | cannot_happen    | cannot_happen    | cannot_happen    |
    | processingStart  | cannot_happen    | cannot_happen    | cannot_happen    | cannot_happen    | cannot_happen    | running          | cannot_happen    |
    | resetLap         | cannot_happen    | cannot_happen    | cannot_happen    | cannot_happen    | cannot_happen    | cannot_happen    | running          |

  end state machine;

  state stopped is
    @noparse
    // Reset the session
    select one session related by self->WorkoutSession[R8.'acts_as_the_stopwatch_for'];
    session.reset();
    
    // Update the UI.
    send UI::setTime(time: self.time);
    select one display related by self->WorkoutSession[R8.'acts_as_the_stopwatch_for']->Display[R7.'current_status_indicated_on'];
    generate Display2:refresh to display;
    @endnoparse
  end state;

  state running is
    @noparse
    // Update the stopwatch time.
    WorkoutTimerConstants::initialize();
    select any wtc from instances of WorkoutTimerConstants;
    self.time = self.time + wtc.timerPeriod;
    
    // Refresh the user interface.
    send UI::setTime(time: self.time);
    @endnoparse
  end state;

  state paused is
    @noparse
    self.deactivate();
    @endnoparse
  end state;

  state processingStart is
    @noparse
    // Start the timer.
    self.activate();
    generate WorkoutTimer6:startTimer() to self;
    @endnoparse
  end state;

  state resetLap is
    @noparse
    select any trackLog from instances of TrackLog;
    if (not empty trackLog)
      trackLog.addLapMarker();
    end if;
    generate WorkoutTimer8:lapResetComplete() to self;
    @endnoparse
  end state;

end;
