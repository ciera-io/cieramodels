// BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

within Tracking::Tracking::Tracking::Tracking is

  //! Represents the stopwatch portion of the device.
  //! This class also knows:
  //! - Track points are stored only when the stopwatch is running.
  //! - If a goal is executing, evaluation of it must be paused when
  //! the timer pauses.
  //! - How to handle the lap/reset signal based on whether the
  //! stopwatch is currently running.
  //! 
  //! This is a singleton instance.
  @key_letters("WorkoutTimer");
  @class_num(1);
  class WorkoutTimer is

    @ref_mode("referred_to");
    @use_prefix(prefix="session_", root_name="startTime");
    session_startTime: referential (R8.WorkoutSession.startTime) timestamp;

    //! Number of seconds elapsed during the associated workout session.
    //! Time elapses only when this timer is running.
    time: integer;

    //! Handle for underlying timer mechanism that produces the
    //! delayed events enabling the timer to track elapsed time.
    timer: timer;

    preferred identifier is (session_startTime);

    @dialect("oal");
    operation activate() is
      @noparse
      // Start the underlying timer that drives the workout timer.
      WorkoutTimerConstants::initialize();
      select any wtc from instances of WorkoutTimerConstants;
      create event instance evt of WorkoutTimer3:tick() to self; 
      self.timer = TIM::timer_start_recurring( event_inst: evt, microseconds: (wtc.timerPeriod * 1000000) );
      
      // Resume evaluation of the currently executing goal, if there is one.
      select one executingGoal related by self->WorkoutSession[R8.'acts_as_the_stopwatch_for']->Goal[R11.'is_currently_executing'];
      if ( not empty executingGoal )
        generate Goal2:Evaluate to executingGoal;
      end if;
      
      // Resume listening for updates from the GPS and heart monitor.
      send LOC::registerListener();
      send HR::registerListener();
      @endnoparse
    end operation;

    @dialect("oal");
    operation deactivate() is
      @noparse
      // Cancel the timer driving the workout timer, ignoring the return code.
      cancelSucceeded = TIM::timer_cancel(timer_inst_ref: self.timer);
      
      // Pause evaluation of the currently executing goal, if there is one.
      select one executingGoal related by self->WorkoutSession[R8.'acts_as_the_stopwatch_for']->Goal[R11.'is_currently_executing'];
      if ( not empty executingGoal )
        generate Goal3:Pause to executingGoal;
      end if;
      
      // Stop listening for updates from the GPS and heart monitor.
      send LOC::unregisterListener();
      send HR::unregisterListener();
      @endnoparse
    end operation;

    @dialect("oal");
    operation initialize() is
      @noparse
      // Initialize this instance.
      
      self.time = 0;
      @endnoparse
    end operation;

  end class;

end;
