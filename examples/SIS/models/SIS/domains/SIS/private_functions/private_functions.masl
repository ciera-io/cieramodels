//! ACTIVITY BEGIN. '6e2fab93-16af-474d-9426-3967b9b4c29a' DO NOT EDIT THIS LINE.
private service SIS::init () is
begin

  // register command line arguments
  CMD::register_value("schools", "schools_file", "CSV file containing schools", "", false);
  CMD::register_value("students", "students_file", "CSV file containing students", "", false);
  CMD::register_value("teachers", "teachers_file", "CSV file containing teachers", "", false);
  CMD::register_value("sections", "sections_file", "CSV file containing sections", "", false);
  CMD::register_value("enrollments", "enrollments_file", "CSV file containing enrollments", "", false);
  CMD::read_command_line();
  
  // load the data if not already loaded
  if find_one School() = null then
    load_data();
  end if;
  
  enroll_test();
  
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '1486371a-538c-4a79-b8c3-2501c69999e4' DO NOT EDIT THIS LINE.
private service SIS::load_data () is
i: integer := 0;
logMessage: string;
begin

  // load schools
  i := 0;
  CSV::load_file(CMD::get_value("schools"));
  while i < CSV::num_rows() loop
    declare
      school: instance of School;
    begin
      // create a school
      school := create School(school_id => CSV::get_cell(i, "School_ID"));
      school.name := CSV::get_cell(i, "School_Name");
    end;
    i := i + 1;
  end loop;
  
  // load students
  i := 0;
  CSV::load_file(CMD::get_value("students"));
  while i < CSV::num_rows() loop
    declare
      school_id: readonly string := CSV::get_cell(i, "School_id");
      student_id: readonly string := CSV::get_cell(i, "Student_id");
      student_grade: readonly string := CSV::get_cell(i, "Grade");
      school: instance of School;
      student: instance of Student;
    begin
      // find the school
      school := find_one School(school_id = school_id);
      if school = null then
        logMessage := "Could not find school with ID: " & school_id & " for student with ID: " & student_id;
        Logger::warning(logMessage);
      else
        // create a new student
        student := create Student(student_id => STRING::atoi(student_id), school_id => school.school_id);
        link student R6 school;
        student.last_name := CSV::get_cell(i, "Last_name");
        student.first_name := CSV::get_cell(i, "First_name");
        if CSV::get_cell(i, "Gender") = "M" then
          student.gender := MALE;
        else
          student.gender := FEMALE;
        end if;
        student.dob := UTIL::parse_date(CSV::get_cell(i, "dob"), "MM/dd/yyyy");
        declare
        begin
          student.grade := STRING::atoi(student_grade);
        exception
          when others =>
            if student_grade = "Preschool" or student_grade = "Kindergarten" then
              student.grade := 0;
            else
              student.grade := -1;
              logMessage := "Could not parse grade: " & student_grade & " for student with ID: " & student_id;
              Logger::warning(logMessage);
            end if;
        end;
      end if;
    end;
    i := i + 1;
  end loop;
  
  // load teachers
  i := 0;
  CSV::load_file(CMD::get_value("teachers"));
  while i < CSV::num_rows() loop
    declare
      school_id: readonly string := CSV::get_cell(i, "School_id");
      teacher_id: readonly string := CSV::get_cell(i, "Teacher_id");
      school: instance of School;
      teacher: instance of Teacher;
    begin
      // find the school
      school := find_one School(school_id = school_id);
      if school = null then
        logMessage := "Could not find school with ID: " & school_id & " for teacher with ID: " & teacher_id;
        Logger::warning(logMessage);
      else
        // create a teacher
        teacher := create Teacher(teacher_id => STRING::atoi(teacher_id), school_id => school.school_id);
        link teacher R7 school;
        teacher.last_name := CSV::get_cell(i, "Last_name");
        teacher.first_name := CSV::get_cell(i, "First_name");
        teacher.title := CSV::get_cell(i, "Title");
      end if;
    end;
    i := i + 1;
  end loop;
  
  // load sections
  i := 0;
  CSV::load_file(CMD::get_value("sections"));
  while i < CSV::num_rows() loop
    declare
      school_id: readonly string := CSV::get_cell(i, "School_id");
      section_id: readonly string := CSV::get_cell(i, "Section_id");
      course_number: readonly integer := STRING::atoi(CSV::get_cell(i, "Course_number"));
      term_name: readonly string := CSV::get_cell(i, "Term_name");
      teacher_id: readonly string := CSV::get_cell(i, "Teacher_id");
      school: instance of School;
      course: instance of Course;
      term: instance of Term;
      teacher: instance of Teacher;
      section: instance of Section;
    begin
      // find the school
      school := find_one School(school_id = school_id);
      if school = null then
        logMessage := "Could not find school with ID: " & school_id & " for section with ID: " & section_id;
        Logger::warning(logMessage);
      else

        // find or create the course
        course := find_one (school -> R8.Course)(course_number = course_number);
        if course = null then
          declare
            subject_name: readonly string := CSV::get_cell(i, "Subject");
            subject: instance of Subject;
          begin
            // find or create the subject
            subject := find_one Subject(name = subject_name);
            if subject = null then
              subject := create Subject(name => subject_name);
            end if;
            
            // create the course
            course := create Course(course_number => course_number, school_id => school.school_id);
            link course R8 school;
            link subject R1 course;
            course.course_name := CSV::get_cell(i, "Course_name");
            course.short_name := CSV::get_cell(i, "Name");
            course.description := CSV::get_cell(i, "Course_description");
          end;
        end if;
        
        // find or create the term
        term := find_one Term(name = term_name);
        if term = null then
          term := create Term(name => term_name);
          term.term_start := UTIL::parse_date(CSV::get_cell(i, "Term_start"), "MM/dd/yyyy");
          term.term_end := UTIL::parse_date(CSV::get_cell(i, "Term_end"), "MM/dd/yyyy");
        end if;
        
        // find the teacher
        teacher := find_one Teacher(teacher_id = STRING::atoi(teacher_id));
        if teacher = null then
          logMessage := "Could not find teacher with ID: " & teacher_id & " for section with ID: " & section_id;
          Logger::warning(logMessage);
        else
          // create the section
          section := create Section(section_id => STRING::atoi(section_id), school_id => school.school_id);
          link course R2 section;
          link term R3 section;
          link teacher R5 section;
        end if;
      end if;
    end;
    i := i + 1;
  end loop;
  
  // load enrollments
  i := 0;
  CSV::load_file(CMD::get_value("enrollments"));
  while i < CSV::num_rows() loop
    declare
      school_id: readonly string := CSV::get_cell(i, "School_id");
      section_id: readonly integer := STRING::atoi(CSV::get_cell(i, "Section_id"));
      student_id: readonly integer := STRING::atoi(CSV::get_cell(i, "Student_id"));
      school: instance of School;
      section: instance of Section;
      student: instance of Student;
      enrollment: instance of Enrollment;
    begin
      // find the school
      school := find_one School(school_id = school_id);
      if school = null then
        logMessage := "Could not find school with ID: " & school_id & " for section with ID: " & STRING::itoa(section_id) & " and student ID: " & STRING::itoa(student_id);
        Logger::warning(logMessage);
      else
        // find section and student
        section := find_one (school -> R8.Course -> R2.Section)(section_id = section_id);
        student := find_one (school -> R6.Student)(student_id = student_id);
        if section = null or student = null then
          logMessage := "Could not find section and student for enrollment: " & school_id & ", " & STRING::itoa(section_id) & ", " & STRING::itoa(student_id);
          Logger::warning(logMessage);
        else
          // create and link the enrollment
          link section R4 student using create Enrollment(school_id => school.school_id, section_id => section.section_id, student_id => student.student_id);
        end if;
      end if;
    end;
    i := i + 1;
  end loop;
  
end service;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

